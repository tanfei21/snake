!function(){"use strict";var e,n,t={125:function(e,n,t){function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t(990);var o=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.snakeEle=document.getElementById("snake"),this.headEle=document.querySelector("#snake > div"),this.bodiesEle=this.snakeEle.getElementsByTagName("div"),this.stageEle=document.getElementById("stage"),this.foodEle=document.getElementById("food")}var n,t;return n=e,(t=[{key:"X",get:function(){return this.headEle.offsetLeft},set:function(e){this.X!==e&&(this.bodiesEle[1]&&this.bodiesEle[1].offsetLeft===e&&(e=e>this.X?this.X-10:this.X+10),this.move("X",e))}},{key:"Y",get:function(){return this.headEle.offsetTop},set:function(e){this.Y!==e&&(this.bodiesEle[1]&&this.bodiesEle[1].offsetTop===e&&(e=e>this.Y?this.Y-10:this.Y+10),this.move("Y",e))}},{key:"init",value:function(){this.snakeEle.innerHTML="<div></div>",this.headEle=document.querySelector("#snake > div"),this.changeLocation()}},{key:"over",value:function(){this.snakeEle.style.display="none"}},{key:"addBody",value:function(){var e=document.createElement("div");this.snakeEle.insertAdjacentElement("beforeend",e)}},{key:"move",value:function(e,n){var t=this.stageEle.clientWidth-this.headEle.clientWidth;if(n<0||n>t)throw new Error("游戏结束! Game Over!");for(var r=this.bodiesEle.length-1;r>0;r--){var o=this.bodiesEle[r-1].offsetLeft,i=this.bodiesEle[r-1].offsetTop;this.bodiesEle[r].style.left=o+"px",this.bodiesEle[r].style.top=i+"px"}"X"===e?this.headEle.style.left=n+"px":this.headEle.style.top=n+"px",this.checkHeadBody()}},{key:"checkHeadBody",value:function(){for(var e=1;e<this.bodiesEle.length;e++){var n=this.bodiesEle[e];if(this.X===n.offsetLeft&&this.Y===n.offsetTop)throw new Error("游戏结束! Game Over!")}}},{key:"changeLocation",value:function(){var e=this.foodEle.clientWidth,n=(this.stageEle.clientWidth-e)/e,t=(this.stageEle.clientHeight-e)/e,r=Math.round(Math.random()*n)*e,o=Math.round(Math.random()*t)*e;this.headEle.style.left=r+"px",this.headEle.style.top=o+"px"}}])&&r(n.prototype,t),e}();function i(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.foodEle=document.getElementById("food"),this.bodiesEle=document.getElementById("snake").getElementsByTagName("div"),this.stageEle=document.getElementById("stage")}var n,t;return n=e,(t=[{key:"X",get:function(){return this.foodEle.offsetLeft}},{key:"Y",get:function(){return this.foodEle.offsetTop}},{key:"init",value:function(){this.changeLocation()}},{key:"over",value:function(){this.foodEle.style.display="none"}},{key:"changeLocation",value:function(){var e=this.foodEle.clientWidth,n=(this.stageEle.clientWidth-e)/e,t=(this.stageEle.clientHeight-e)/e,r=Math.round(Math.random()*n)*e,o=Math.round(Math.random()*t)*e;this.foodEle.style.left=r+"px",this.foodEle.style.top=o+"px"}}])&&i(n.prototype,t),e}();function s(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function c(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var A=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;s(this,e),this.score=0,this.level=1,this.scoreEle=document.getElementById("score"),this.levelEle=document.getElementById("level"),this.maxLevel=n,this.upScore=t}var n,t;return n=e,(t=[{key:"addScore",value:function(){this.scoreEle.innerHTML=++this.score+"",this.score%this.upScore==0&&this.levelUp()}},{key:"levelUp",value:function(){this.level<this.maxLevel&&(this.levelEle.innerHTML=++this.level+"")}},{key:"init",value:function(){this.score=0,this.level=1,this.scoreEle.innerHTML=this.score+"",this.levelEle.innerHTML=this.level+""}}])&&c(n.prototype,t),e}();function l(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.direction="",this.isLive=!0,this.settingEle=document.getElementById("setting"),this.startEle=document.getElementById("start"),this.setTitLEle=document.getElementById("set-title"),this.snake=new o,this.food=new a,this.scorePanel=new A}var n,t;return n=e,(t=[{key:"init",value:function(){console.log("初始化"),this.snake.init(),this.scorePanel.init(),this.food.init(),this.direction="Right",this.isLive=!0,document.addEventListener("keydown",this.keydownHandler.bind(this)),document.getElementById("up").addEventListener("click",this.clickHandler.bind(this)),document.getElementById("down").addEventListener("click",this.clickHandler.bind(this)),document.getElementById("left").addEventListener("click",this.clickHandler.bind(this)),document.getElementById("right").addEventListener("click",this.clickHandler.bind(this)),this.run()}},{key:"keydownHandler",value:function(e){this.direction=e.key}},{key:"clickHandler",value:function(e){var n,t;console.log(e),this.direction=null===(t=null===(n=null==e?void 0:e.target)||void 0===n?void 0:n.dataset)||void 0===t?void 0:t.direction}},{key:"run",value:function(){var e=this.snake.X,n=this.snake.Y;switch(this.direction){case"ArrowUp":case"Up":case"w":case"W":n-=10;break;case"ArrowDown":case"Down":case"s":case"S":n+=10;break;case"ArrowLeft":case"Left":case"a":case"A":e-=10;break;case"ArrowRight":case"Right":case"d":case"D":e+=10}this.checkEat(e,n);try{this.snake.X=e,this.snake.Y=n}catch(e){this.over()}this.isLive&&setTimeout(this.run.bind(this),300-30*(this.scorePanel.level-1))}},{key:"over",value:function(){this.isLive=!1,this.snake.over(),this.food.over(),this.settingEle.style.display="flex",this.startEle.innerHTML="重新开始",this.setTitLEle.innerHTML="Game Over!"}},{key:"checkEat",value:function(e,n){if(e===this.food.X&&n===this.food.Y)return console.log("吃到了"),this.food.changeLocation(),this.scorePanel.addScore(),void this.snake.addBody();for(var t=this.snake.bodiesEle,r=0;r<t.length;r++)if(t[r].offsetLeft===this.food.X&&t[r].offsetTop===this.food.Y)return this.food.changeLocation(),this.scorePanel.addScore(),void this.snake.addBody()}}])&&l(n.prototype,t),e}(),u=document.getElementById("setting"),f=document.getElementById("start"),p=document.getElementById("snake"),h=document.getElementById("food");f.addEventListener("click",(function(){console.log("重新开始"),u.style.display="none",p.style.display="block",h.style.display="flex",m.init()}));var m=new d},485:function(e,n,t){t.r(n);var r=t(15),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"* {\n  padding: 0;\n  margin: 0;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\nbody {\n  font: bold 20px 'Courier';\n}\n#main {\n  margin: 10px auto;\n  width: 360px;\n  height: 600px;\n  border: 10px solid #000;\n  border-radius: 30px;\n  background-color: #b7d4a8;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-pack: start;\n      -ms-flex-pack: start;\n          justify-content: flex-start;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n#main #stage {\n  border: 2px solid #000;\n  width: 304px;\n  height: 304px;\n  position: relative;\n  margin-top: 20px;\n}\n#main #stage #setting {\n  width: 300px;\n  height: 300px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n#main #stage #setting #start {\n  margin-top: 20px;\n}\n#main #stage #snake {\n  display: none;\n}\n#main #stage #snake > div {\n  width: 10px;\n  height: 10px;\n  border: 1px solid #b7d4a8;\n  background-color: #000;\n  position: absolute;\n}\n#main #stage #food {\n  position: absolute;\n  left: 10px;\n  top: 0;\n  width: 10px;\n  height: 10px;\n  display: none;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  -ms-flex-line-pack: justify;\n      align-content: space-between;\n  -webkit-transform: scale(0.8);\n          transform: scale(0.8);\n}\n#main #stage #food > div {\n  width: 4px;\n  height: 4px;\n  background-color: #000;\n  -webkit-transform: rotate(45deg);\n          transform: rotate(45deg);\n}\n#main #score-panel {\n  width: 300px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-pack: justify;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n  -webkit-box-align: space-between;\n      -ms-flex-align: space-between;\n          align-items: space-between;\n  margin-top: 25px;\n}\n#main #button-wrap {\n  width: 100%;\n  height: 120px;\n  margin-top: 40px;\n  position: relative;\n  -webkit-transform: scale(0.6);\n          transform: scale(0.6);\n}\n#main #button-wrap #up {\n  border: 50px solid transparent;\n  border-bottom-color: #000;\n  position: absolute;\n  top: -100px;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n#main #button-wrap #down {\n  border: 50px solid transparent;\n  border-top-color: #000;\n  position: absolute;\n  bottom: -100px;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n#main #button-wrap #left {\n  border: 50px solid transparent;\n  border-right-color: #000;\n  position: absolute;\n  left: 0;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n          transform: translateY(-50%);\n}\n#main #button-wrap #right {\n  border: 50px solid transparent;\n  border-left-color: #000;\n  position: absolute;\n  right: 0;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n          transform: translateY(-50%);\n}\n","",{version:3,sources:["webpack://./src/style/index.less"],names:[],mappings:"AAEA;EACE,UAAA;EACA,SAAA;EACA,8BAAA;UAAA,sBAAA;AADF;AAIA;EACE,yBAAA;AAFF;AAKA;EACE,iBAAA;EACA,YAAA;EACA,aAAA;EACA,uBAAA;EACA,mBAAA;EACA,yBAAA;EACA,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,4BAAA;EAAA,6BAAA;MAAA,0BAAA;UAAA,sBAAA;EACA,uBAAA;MAAA,oBAAA;UAAA,2BAAA;EACA,yBAAA;MAAA,sBAAA;UAAA,mBAAA;AAHF;AAPA;EAYI,sBAAA;EACA,YAAA;EACA,aAAA;EACA,kBAAA;EACA,gBAAA;AAFJ;AAdA;EAkBM,YAAA;EACA,aAAA;EACA,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,4BAAA;EAAA,6BAAA;MAAA,0BAAA;UAAA,sBAAA;EACA,wBAAA;MAAA,qBAAA;UAAA,uBAAA;EACA,yBAAA;MAAA,sBAAA;UAAA,mBAAA;AADN;AAtBA;EAyBQ,gBAAA;AAAR;AAzBA;EA6BM,aAAA;AADN;AAEM;EACE,WAAA;EACA,YAAA;EACA,yBAAA;EACA,sBAAA;EACA,kBAAA;AAAR;AAnCA;EAwCM,kBAAA;EACA,UAAA;EACA,MAAA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,8BAAA;EAAA,6BAAA;MAAA,uBAAA;UAAA,mBAAA;EACA,mBAAA;MAAA,eAAA;EACA,yBAAA;MAAA,sBAAA;UAAA,8BAAA;EACA,2BAAA;MAAA,4BAAA;EACA,6BAAA;UAAA,qBAAA;AAFN;AAGM;EACE,UAAA;EACA,WAAA;EACA,sBAAA;EACA,gCAAA;UAAA,wBAAA;AADR;AAtDA;EA4DI,YAAA;EACA,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,8BAAA;EAAA,6BAAA;MAAA,uBAAA;UAAA,mBAAA;EACA,yBAAA;MAAA,sBAAA;UAAA,8BAAA;EACA,gCAAA;MAAA,6BAAA;UAAA,0BAAA;EACA,gBAAA;AAHJ;AA9DA;EAqEI,WAAA;EACA,aAAA;EACA,gBAAA;EACA,kBAAA;EACA,6BAAA;UAAA,qBAAA;AAJJ;AArEA;EA2EM,8BAAA;EACA,yBAAA;EACA,kBAAA;EACA,WAAA;EACA,SAAA;EACA,mCAAA;UAAA,2BAAA;AAHN;AA7EA;EAmFM,8BAAA;EACA,sBAAA;EACA,kBAAA;EACA,cAAA;EACA,SAAA;EACA,mCAAA;UAAA,2BAAA;AAHN;AArFA;EA2FM,8BAAA;EACA,wBAAA;EACA,kBAAA;EACA,OAAA;EACA,QAAA;EACA,mCAAA;UAAA,2BAAA;AAHN;AA7FA;EAmGM,8BAAA;EACA,uBAAA;EACA,kBAAA;EACA,QAAA;EACA,QAAA;EACA,mCAAA;UAAA,2BAAA;AAHN",sourcesContent:["@bg-color: #b7d4a8;\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font: bold 20px 'Courier';\n}\n\n#main {\n  margin: 10px auto;\n  width: 360px;\n  height: 600px;\n  border: 10px solid #000;\n  border-radius: 30px;\n  background-color: @bg-color;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  #stage {\n    border: 2px solid #000;\n    width: 304px;\n    height: 304px;\n    position: relative;\n    margin-top: 20px;\n    #setting {\n      width: 300px;\n      height: 300px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items:center;\n      #start{\n        margin-top: 20px;\n      }\n    }\n    #snake {\n      display: none;\n      & > div {\n        width: 10px;\n        height: 10px;\n        border: 1px solid @bg-color;\n        background-color: #000;\n        position: absolute;\n        // z-index: 2;\n      }\n    }\n    #food {\n      position: absolute;\n      left: 10px;\n      top: 0;\n      width: 10px;\n      height: 10px;\n      display: none;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n      align-content: space-between;\n      transform: scale(0.8);\n      & > div {\n        width: 4px;\n        height: 4px;\n        background-color: #000;\n        transform: rotate(45deg);\n      }\n    }\n  }\n  #score-panel {\n    width: 300px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: space-between;\n    margin-top: 25px;\n  }\n\n  #button-wrap {\n    width: 100%;\n    height: 120px;\n    margin-top: 40px;\n    position: relative;\n    transform: scale(0.6);\n    #up {\n      border: 50px solid transparent;\n      border-bottom-color: #000;\n      position: absolute;\n      top: -100px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n    #down {\n      border: 50px solid transparent;\n      border-top-color: #000;\n      position: absolute;\n      bottom: -100px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n    #left {\n      border: 50px solid transparent;\n      border-right-color: #000;\n      position: absolute;\n      left: 0;\n      top: 50%;\n      transform: translateY(-50%);\n    }\n    #right {\n      border: 50px solid transparent;\n      border-left-color: #000;\n      position: absolute;\n      right: 0;\n      top: 50%;\n      transform: translateY(-50%);\n    }\n  }\n}\n"],sourceRoot:""}]),n.default=a},645:function(e){e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:function(e){function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],r=!0,o=!1,i=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(t.push(a.value),!n||t.length!==n);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return t}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),A="/*# ".concat(c," */"),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(l).concat([A]).join("\n")}return[i].join("\n")}},990:function(e,n,t){var r=t(379),o=t.n(r),i=t(485),a=o()(i.default,{insert:"head",singleton:!1});if(!i.default.locals||e.hot.invalidate){var s=i.default.locals;e.hot.accept(485,function(n){i=t(485),function(e,n,t){if(!e&&n||e&&!n)return!1;var r;for(r in e)if(e[r]!==n[r])return!1;for(r in n)if(!e[r])return!1;return!0}(s,i.default.locals)?(s=i.default.locals,a(i.default)):e.hot.invalidate()}.bind(this))}e.hot.dispose((function(){a()})),i.default.locals},379:function(e,n,t){var r,o=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function a(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},r=[],o=0;o<e.length;o++){var s=e[o],c=n.base?s[0]+n.base:s[0],A=t[c]||0,l="".concat(c," ").concat(A);t[c]=A+1;var d=a(l),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(i[d].references++,i[d].updater(u)):i.push({identifier:l,updater:h(u,n),references:1}),r.push(l)}return r}function c(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var A,l=(A=[],function(e,n){return A[e]=n,A.filter(Boolean).join("\n")});function d(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(n,o);else{var i=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}function u(e,n,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,p=0;function h(e,n){var t,r,o;if(n.singleton){var i=p++;t=f||(f=c(n)),r=d.bind(null,t,i,!1),o=d.bind(null,t,i,!0)}else t=c(n),r=u.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=a(t[r]);i[o].references--}for(var c=s(e,n),A=0;A<t.length;A++){var l=a(t[A]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}t=c}}}}},r={};function o(e){var n=r[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var i=r[e]={id:e,exports:{}};try{var a={id:e,module:i,factory:t[e],require:o};o.i.forEach((function(e){e(a)})),i=a.module,a.factory.call(i.exports,i,i.exports,a.require)}catch(e){throw i.error=e,e}return i.exports}o.m=t,o.c=r,o.i=[],o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,{a:n}),n},o.d=function(e,n){for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.hu=function(e){return e+"."+o.h()+".hot-update.js"},o.hmrF=function(){return"main."+o.h()+".hot-update.json"},o.h=function(){return"e0757fab5c0772c4cf06"},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},e={},n="snake:",o.l=function(t,r,i,a){if(e[t])e[t].push(r);else{var s,c;if(void 0!==i)for(var A=document.getElementsByTagName("script"),l=0;l<A.length;l++){var d=A[l];if(d.getAttribute("src")==t||d.getAttribute("data-webpack")==n+i){s=d;break}}s||(c=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.setAttribute("data-webpack",n+i),s.src=t),e[t]=[r];var u=function(n,r){s.onerror=s.onload=null,clearTimeout(f);var o=e[t];if(delete e[t],s.parentNode&&s.parentNode.removeChild(s),o&&o.forEach((function(e){return e(r)})),n)return n(r)},f=setTimeout(u.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=u.bind(null,s.onerror),s.onload=u.bind(null,s.onload),c&&document.head.appendChild(s)}},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e,n,t,r,i={},a=o.c,s=[],c=[],A="idle";function l(e){A=e;for(var n=0;n<c.length;n++)c[n].call(null,e)}function d(e){if(0===n.length)return e();var t=n;return n=[],Promise.all(t).then((function(){return d(e)}))}function u(e){if("idle"!==A)throw new Error("check() is only allowed in idle status");return l("check"),o.hmrM().then((function(r){if(!r)return l(h()?"ready":"idle"),null;l("prepare");var i=[];return n=[],t=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,n){return o.hmrC[n](r.c,r.r,r.m,e,t,i),e}),[])).then((function(){return d((function(){return e?p(e):(l("ready"),i)}))}))}))}function f(e){return"ready"!==A?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):p(e)}function p(e){e=e||{},h();var n=t.map((function(n){return n(e)}));t=void 0;var o,i=n.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),n.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var a=function(e){o||(o=e)},s=[];return n.forEach((function(e){if(e.apply){var n=e.apply(a);if(n)for(var t=0;t<n.length;t++)s.push(n[t])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):r?p(e).then((function(e){return s.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):(l("idle"),Promise.resolve(s))}function h(){if(r)return t||(t=[]),Object.keys(o.hmrI).forEach((function(e){r.forEach((function(n){o.hmrI[e](n,t)}))})),r=void 0,!0}o.hmrD=i,o.i.push((function(p){var h,m,v,b=p.module,E=function(t,r){var o=a[r];if(!o)return t;var i=function(n){if(o.hot.active){if(a[n]){var i=a[n].parents;-1===i.indexOf(r)&&i.push(r)}else s=[r],e=n;-1===o.children.indexOf(n)&&o.children.push(n)}else console.warn("[HMR] unexpected require("+n+") from disposed module "+r),s=[];return t(n)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var u in t)Object.prototype.hasOwnProperty.call(t,u)&&"e"!==u&&Object.defineProperty(i,u,c(u));return i.e=function(e){return function(e){switch(A){case"ready":return l("prepare"),n.push(e),d((function(){l("ready")})),e;case"prepare":return n.push(e),e;default:return e}}(t.e(e))},i}(p.require,p.id);b.hot=(h=p.id,m=b,v={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==h,_requireSelf:function(){s=m.parents.slice(),e=h,o(h)},active:!0,accept:function(e,n,t){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)v._acceptedDependencies[e[r]]=n||function(){},v._acceptedErrorHandlers[e[r]]=t;else v._acceptedDependencies[e]=n||function(){},v._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)v._declinedDependencies[e[n]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=v._disposeHandlers.indexOf(e);n>=0&&v._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,A){case"idle":t=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](h,t)})),l("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](h,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(h)}},check:u,apply:f,status:function(e){if(!e)return A;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var n=c.indexOf(e);n>=0&&c.splice(n,1)},data:i[h]},e=void 0,v),b.parents=s,b.children=[],s=[],p.require=E})),o.hmrC={},o.hmrI={}}(),function(){var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e}(),function(){var e,n,t,r,i={179:0},a={};function s(e){return new Promise((function(n,t){a[e]=n;var r=o.p+o.hu(e),i=new Error;o.l(r,(function(n){if(a[e]){a[e]=void 0;var r=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;i.message="Loading hot update chunk "+e+" failed.\n("+r+": "+o+")",i.name="ChunkLoadError",i.type=r,i.request=o,t(i)}}))}))}function c(a){function s(e){for(var n=[e],t={},r=n.map((function(e){return{chain:[e],id:e}}));r.length>0;){var i=r.pop(),a=i.id,s=i.chain,A=o.c[a];if(A&&(!A.hot._selfAccepted||A.hot._selfInvalidated)){if(A.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(A.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var l=0;l<A.parents.length;l++){var d=A.parents[l],u=o.c[d];if(u){if(u.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([d]),moduleId:a,parentId:d};-1===n.indexOf(d)&&(u.hot._acceptedDependencies[a]?(t[d]||(t[d]=[]),c(t[d],[a])):(delete t[d],n.push(d),r.push({chain:s.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function c(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}o.f&&delete o.f.jsonpHmr,e=void 0;var A={},l=[],d={},u=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in n)if(o.o(n,f)){var p,h=n[f],m=!1,v=!1,b=!1,E="";switch((p=h?s(f):{type:"disposed",moduleId:f}).chain&&(E="\nUpdate propagation: "+p.chain.join(" -> ")),p.type){case"self-declined":a.onDeclined&&a.onDeclined(p),a.ignoreDeclined||(m=new Error("Aborted because of self decline: "+p.moduleId+E));break;case"declined":a.onDeclined&&a.onDeclined(p),a.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+p.moduleId+" in "+p.parentId+E));break;case"unaccepted":a.onUnaccepted&&a.onUnaccepted(p),a.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+E));break;case"accepted":a.onAccepted&&a.onAccepted(p),v=!0;break;case"disposed":a.onDisposed&&a.onDisposed(p),b=!0;break;default:throw new Error("Unexception type "+p.type)}if(m)return{error:m};if(v)for(f in d[f]=h,c(l,p.outdatedModules),p.outdatedDependencies)o.o(p.outdatedDependencies,f)&&(A[f]||(A[f]=[]),c(A[f],p.outdatedDependencies[f]));b&&(c(l,[p.moduleId]),d[f]=u)}n=void 0;for(var y,g=[],x=0;x<l.length;x++){var w=l[x],k=o.c[w];k&&k.hot._selfAccepted&&d[w]!==u&&!k.hot._selfInvalidated&&g.push({module:w,require:k.hot._requireSelf,errorHandler:k.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete i[e]})),t=void 0;for(var n,r=l.slice();r.length>0;){var a=r.pop(),s=o.c[a];if(s){var c={},d=s.hot._disposeHandlers;for(x=0;x<d.length;x++)d[x].call(null,c);for(o.hmrD[a]=c,s.hot.active=!1,delete o.c[a],delete A[a],x=0;x<s.children.length;x++){var u=o.c[s.children[x]];u&&(e=u.parents.indexOf(a))>=0&&u.parents.splice(e,1)}}}for(var f in A)if(o.o(A,f)&&(s=o.c[f]))for(y=A[f],x=0;x<y.length;x++)n=y[x],(e=s.children.indexOf(n))>=0&&s.children.splice(e,1)},apply:function(e){for(var n in d)o.o(d,n)&&(o.m[n]=d[n]);for(var t=0;t<r.length;t++)r[t](o);for(var i in A)if(o.o(A,i)){var s=o.c[i];if(s){y=A[i];for(var c=[],u=[],f=[],p=0;p<y.length;p++){var h=y[p],m=s.hot._acceptedDependencies[h],v=s.hot._acceptedErrorHandlers[h];if(m){if(-1!==c.indexOf(m))continue;c.push(m),u.push(v),f.push(h)}}for(var b=0;b<c.length;b++)try{c[b].call(null,y)}catch(n){if("function"==typeof u[b])try{u[b](n,{moduleId:i,dependencyId:f[b]})}catch(t){a.onErrored&&a.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:f[b],error:t,originalError:n}),a.ignoreErrored||(e(t),e(n))}else a.onErrored&&a.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[b],error:n}),a.ignoreErrored||e(n)}}}for(var E=0;E<g.length;E++){var x=g[E],w=x.module;try{x.require(w)}catch(n){if("function"==typeof x.errorHandler)try{x.errorHandler(n,{moduleId:w,module:o.c[w]})}catch(t){a.onErrored&&a.onErrored({type:"self-accept-error-handler-errored",moduleId:w,error:t,originalError:n}),a.ignoreErrored||(e(t),e(n))}else a.onErrored&&a.onErrored({type:"self-accept-errored",moduleId:w,error:n}),a.ignoreErrored||e(n)}}return l}}}self.webpackHotUpdatesnake=function(e,t,i){for(var s in t)o.o(t,s)&&(n[s]=t[s]);i&&r.push(i),a[e]&&(a[e](),a[e]=void 0)},o.hmrI.jsonp=function(e,i){n||(n={},r=[],t=[],i.push(c)),o.o(n,e)||(n[e]=o.m[e])},o.hmrC.jsonp=function(a,A,l,d,u,f){u.push(c),e={},t=A,n=l.reduce((function(e,n){return e[n]=!1,e}),{}),r=[],a.forEach((function(n){o.o(i,n)&&void 0!==i[n]&&(d.push(s(n)),e[n]=!0)})),o.f&&(o.f.jsonpHmr=function(n,t){e&&!o.o(e,n)&&o.o(i,n)&&void 0!==i[n]&&(t.push(s(n)),e[n]=!0)})},o.hmrM=function(){if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((function(e){if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}}(),o(125)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,